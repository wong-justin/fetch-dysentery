#!/bin/bash
#
# cludgy 3 AM AI script, sorry
# only tested on (arch) linux, and halfheartedly trying to support other OSs/setups
#
# credit to dylanaraps' neofetch: https://github.com/dylanaraps/neofetch
# and the predecessor screenfetch: https://github.com/KittyKatt/screenFetch
#
# play the oregon trail online: https://classicreload.com/oregon-trail.html
#
# fixme:
# - improve `get_battery`?
# - mac does not have `/proc/cpuinfo`
# - neither does it have `/proc/meminfo`
# - use shellcheck
#
# would be nice to have an actual pixel artist touch up the ascii art
# currently generated by doing chafa assets/wagon.png --format symbols --symbols block --size 40x25
# or actually i edited out the man from the image. but yeah


help() {
  cat <<EOF

$(basename "$0") --option "value" --option "value" ...

  Display system specs in the style of the Oregon Trail.

EXAMPLE:
  $(basename "$0") --weather "freezing"

OPTIONS:

  --user-at-host          <msg>
  --date                  <msg>
  --weather               <msg>	  
  --battery               <msg>
  --packages              <msg>
  --ram                   <msg>
  --cores                 <msg>
  --disk-space-used       <msg>
  --disk-space-remaining  <msg>
  -h, --help

SOURCE:
  https://github.com/wong-justin/fetch-dysentery

EOF
  exit 0
}

ascii_art="\
[?25l[0m            [38;2;0;0;0m‚ñÅ[48;2;3;3;3m‚ñî[38;2;193;193;193;48;2;7;7;7m‚ñÇ[38;2;20;20;20;48;2;241;241;241m‚ñÄ[38;2;240;240;240;48;2;32;32;32m‚ñÜ[38;2;20;20;20;48;2;239;239;239m‚ñî[0m[38;2;254;254;254m‚ñà[38;2;236;236;236;48;2;254;254;254m‚ñÅ[38;2;204;204;204;48;2;253;253;253m‚ñï[38;2;3;3;3;48;2;237;237;237m‚ñî[38;2;245;245;245;48;2;137;137;137m‚ñÜ[38;2;155;155;155;48;2;226;226;226m‚ñò[38;2;145;145;145;48;2;198;198;198m‚ñï[38;2;141;141;141;48;2;213;213;213m‚ñÅ[38;2;212;212;212;48;2;135;135;135m‚ñÜ[38;2;141;141;141;48;2;220;220;220m‚ñù[38;2;135;135;135;48;2;171;171;171m‚ñó[38;2;240;240;240;48;2;160;160;160m‚ñÄ[38;2;86;86;86;48;2;231;231;231m‚ñî[38;2;151;151;151;48;2;215;215;215m‚ñù[38;2;170;170;170;48;2;207;207;207m‚ñï[38;2;154;154;154;48;2;220;220;220m‚ñÅ[38;2;172;172;172;48;2;242;242;242m‚ñÇ[38;2;232;232;232;48;2;59;59;59m‚ñÜ[38;2;195;195;195;48;2;13;13;13m‚ñÉ[0m[7m[38;2;3;3;3m‚ñî[0m  [0m
           [7m[38;2;0;0;0m‚ñî[0m[38;2;164;164;164;48;2;7;7;7m‚ñó[38;2;80;80;80;48;2;232;232;232m‚ñò[38;2;225;225;225;48;2;250;250;250m‚ñÅ[38;2;253;253;253;48;2;254;254;254m‚ñï[38;2;133;133;133;48;2;233;233;233m‚ññ[38;2;183;183;183;48;2;253;253;253m‚ñä[38;2;243;243;243;48;2;254;254;254m‚ñÅ[38;2;74;74;74;48;2;234;234;234m‚ñê[38;2;153;153;153;48;2;243;243;243m‚ñï[38;2;180;180;180;48;2;250;250;250m‚ñã[38;2;206;206;206;48;2;247;247;247m‚ñÅ[38;2;174;174;174;48;2;254;254;254m‚ñÉ[38;2;253;253;253m‚ñè[38;2;142;142;142;48;2;246;246;246m‚ñù[38;2;77;77;77;48;2;178;178;178m‚ñó[38;2;165;165;165;48;2;200;200;200m‚ñè[38;2;153;153;153;48;2;240;240;240m‚ññ[38;2;124;124;124;48;2;218;218;218m‚ñÄ[38;2;77;77;77;48;2;172;172;172m‚ññ[38;2;182;182;182;48;2;240;240;240m‚ñç[38;2;241;241;241;48;2;254;254;254m‚ñî[38;2;111;111;111;48;2;197;197;197m‚ñó[38;2;212;212;212;48;2;168;168;168m‚ñï[38;2;213;213;213;48;2;175;175;175m‚ñù[38;2;169;169;169;48;2;248;248;248m‚ññ[38;2;37;37;37;48;2;193;193;193m‚ñê[0m[38;2;0;0;0m‚ñè[0m [0m
          [38;2;0;0;0m‚ñï[38;2;146;146;146;48;2;11;11;11m‚ñï[38;2;182;182;182;48;2;248;248;248m‚ñè[38;2;254;254;254;48;2;174;174;174m‚ñç[38;2;155;155;155;48;2;240;240;240m‚ñé[38;2;246;246;246;48;2;254;254;254m‚ñÅ[38;2;191;191;191;48;2;102;102;102m‚ñä[38;2;176;176;176;48;2;64;64;64m‚ñÄ[38;2;186;186;186;48;2;21;21;21m‚ñÄ[38;2;181;181;181;48;2;0;0;0m‚ñÄ[38;2;209;209;209;48;2;19;19;19m‚ñÄ[38;2;40;40;40;48;2;199;199;199m‚ñÉ[38;2;99;99;99;48;2;202;202;202m‚ñé[38;2;195;195;195;48;2;249;249;249m‚ñò[38;2;156;156;156;48;2;253;253;253m‚ñÇ[38;2;193;193;193;48;2;254;254;254m‚ññ[38;2;205;205;205;48;2;251;251;251m‚ñï[38;2;208;208;208;48;2;126;126;126m‚ñê[38;2;232;232;232;48;2;173;173;173m‚ñé[38;2;181;181;181;48;2;245;245;245m‚ñÇ[38;2;87;87;87;48;2;214;214;214m‚ñê[38;2;231;231;231;48;2;163;163;163m‚ñÖ[38;2;208;208;208;48;2;238;238;238m‚ññ[38;2;246;246;246;48;2;0;0;0m‚ñä[38;2;56;56;56;48;2;250;250;250m‚ñé[38;2;217;217;217;48;2;165;165;165m‚ññ[38;2;184;184;184;48;2;161;161;161m‚ñï[38;2;230;230;230;48;2;32;32;32m‚ñã[0m[7m[38;2;0;0;0m‚ñï[0m [0m
          [38;2;0;0;0m‚ñï[48;2;238;238;238m‚ñã[38;2;231;231;231;48;2;253;253;253m‚ñï[38;2;166;166;166;48;2;219;219;219m‚ñù[38;2;233;233;233;48;2;184;184;184m‚ñÅ[38;2;77;77;77;48;2;203;203;203m‚ñó[38;2;128;128;128;48;2;1;1;1m‚ñò[0m[38;2;0;0;0m‚ñà[38;2;112;95;112;48;2;0;0;0m‚ñÅ[38;2;207;177;207m‚ñÅ[38;2;179;153;179m‚ñÅ[0m[38;2;0;0;0m‚ñà[38;2;64;64;64;48;2;6;6;6m‚ñï[38;2;25;25;25;48;2;173;173;173m‚ñî[38;2;159;159;159;48;2;204;204;204m‚ññ[38;2;206;206;206;48;2;233;233;233m‚ñÄ[38;2;229;229;229;48;2;254;254;254m‚ñÅ[38;2;254;254;254;48;2;67;67;67m‚ñç[38;2;251;251;251;48;2;168;168;168m‚ñã[38;2;163;163;163;48;2;205;205;205m‚ñû[38;2;237;237;237;48;2;0;0;0m‚ñã[38;2;156;156;156;48;2;220;220;220m‚ñè[38;2;250;250;250;48;2;171;171;171m‚ñê[38;2;219;219;219;48;2;42;42;42m‚ñä[38;2;125;125;125;48;2;235;235;235m‚ñé[38;2;254;254;254;48;2;191;191;191m‚ñó[38;2;103;103;103;48;2;237;237;237m‚ñó[38;2;113;113;113;48;2;10;10;10m‚ñè[0m[38;2;0;0;0m‚ñè[0m [0m
           [38;2;122;122;122;48;2;5;5;5m‚ñï[38;2;157;157;157;48;2;241;241;241m‚ñÇ[38;2;152;152;152;48;2;212;212;212m‚ñÅ[38;2;201;201;201;48;2;222;222;222m‚ñÅ[38;2;245;245;245;48;2;19;19;19m‚ñç[38;2;142;131;124;48;2;9;8;8m‚ñÅ[38;2;59;50;59;48;2;0;0;0m‚ñï[38;2;106;91;106;48;2;201;167;197m‚ñè[38;2;167;153;145;48;2;218;181;203m‚ñÅ[38;2;140;117;134;48;2;238;197;228m‚ñó[38;2;194;164;194;48;2;7;6;7m‚ñç[0m[38;2;0;0;0m‚ñà[38;2;12;12;12;48;2;204;204;204m‚ñä[38;2;244;244;244;48;2;194;194;194m‚ñÉ[38;2;242;242;242;48;2;173;173;173m‚ñÜ[38;2;243;243;243;48;2;174;174;174m‚ñÜ[38;2;95;95;95;48;2;191;191;191m‚ñã[38;2;237;237;237;48;2;166;166;166m‚ñé[38;2;104;104;104;48;2;230;230;230m‚ñó[38;2;137;137;137;48;2;184;184;184m‚ñû[38;2;254;254;254;48;2;192;192;192m‚ñó[38;2;162;162;162;48;2;218;218;218m‚ñó[38;2;91;91;91;48;2;224;224;224m‚ñò[38;2;16;10;6;48;2;183;182;182m‚ñÅ[38;2;47;40;35;48;2;222;222;222m‚ñÖ[38;2;57;57;57;48;2;0;0;0m‚ñî[0m[38;2;0;0;0m‚ñè[0m  [0m
           [38;2;0;0;0m‚ñî[38;2;5;5;5;48;2;123;123;123m‚ñÜ[38;2;54;54;54;48;2;208;208;208m‚ññ[38;2;178;178;178;48;2;224;224;224m‚ñï[38;2;213;213;213;48;2;110;110;110m‚ñÖ[38;2;71;65;62;48;2;177;168;174m‚ñò[38;2;166;145;166;48;2;9;7;9m‚ñÜ[38;2;132;113;132;48;2;16;13;16m‚ñä[38;2;0;0;0;48;2;207;158;202m‚ñè[38;2;20;17;20;48;2;209;158;206m‚ñï[38;2;207;178;207;48;2;72;63;72m‚ññ[38;2;183;183;183;48;2;19;19;19m‚ñó[38;2;108;108;108;48;2;209;209;209m‚ñò[38;2;138;138;138;48;2;217;217;217m‚ññ[38;2;144;144;144;48;2;236;236;236m‚ñÇ[38;2;72;72;72;48;2;200;200;200m‚ñù[38;2;120;111;106;48;2;195;195;195m‚ñÅ[38;2;66;51;40;48;2;198;198;198m‚ñÉ[38;2;110;78;56;48;2;176;176;176m‚ñÉ[38;2;222;222;222;48;2;106;69;43m‚ñÄ[38;2;109;72;46;48;2;193;193;193m‚ñÜ[38;2;198;198;198;48;2;112;74;47m‚ñî[38;2;177;132;105;48;2;109;74;50m‚ñÅ[38;2;103;64;35;48;2;207;155;124m‚ñÄ[38;2;208;167;142;48;2;25;15;7m‚ñÖ[38;2;0;0;0;48;2;199;142;108m‚ñÄ[0m[38;2;45;29;19m‚ñè[0m  [0m
           [7m[38;2;0;0;0m‚ñî[0m[38;2;115;83;67;48;2;7;5;4m‚ñó[38;2;176;128;101;48;2;0;0;0m‚ñÉ[38;2;188;137;108;48;2;44;44;44m‚ñÉ[38;2;141;103;81;48;2;186;173;166m‚ññ[38;2;198;178;168;48;2;147;127;117m‚ñä[38;2;239;239;239;48;2;179;140;118m‚ñÄ[38;2;29;29;29;48;2;190;167;155m‚ñî[38;2;197;143;113;48;2;98;87;98m‚ñÉ[38;2;196;169;154;48;2;95;77;95m‚ñÜ[38;2;223;221;223;48;2;186;145;123m‚ñÄ[38;2;220;220;220;48;2;187;145;123m‚ñÄ[38;2;170;121;94;48;2;216;206;200m‚ñÇ[38;2;187;187;187;48;2;83;61;48m‚ñò[38;2;109;66;36;48;2;174;174;174m‚ñÜ[38;2;200;134;95;48;2;102;69;46m‚ñÇ[38;2;96;59;34;48;2;188;142;115m‚ñÄ[38;2;234;187;160;48;2;122;75;44m‚ñÖ[38;2;236;185;155;48;2;96;60;36m‚ñÉ[38;2;153;98;62;48;2;101;63;35m‚ñû[38;2;110;66;36;48;2;134;83;46m‚ñÅ[38;2;55;33;17;48;2;161;104;70m‚ñä[38;2;129;101;84;48;2;207;167;144m‚ñÅ[38;2;192;174;162;48;2;79;59;43m‚ññ[38;2;236;210;194;48;2;73;66;62m‚ñç[38;2;25;23;22;48;2;180;154;138m‚ñÇ[38;2;207;148;112;48;2;25;15;10m‚ñã[0m[38;2;0;0;0m‚ñè[0m [0m
 [7m[38;2;3;2;1m‚ñî[38;2;126;77;47m‚ñÄ[0m[38;2;67;41;25;48;2;8;5;3m‚ñÅ[0m[7m[38;2;87;53;32m‚ñî[0m[38;2;0;0;0m‚ñÅ‚ñÅ‚ñÅ‚ñÅ[38;2;97;59;36m‚ñÉ[38;2;154;113;88;48;2;5;3;2m‚ñÇ[38;2;157;105;74;48;2;9;5;3m‚ñÉ[38;2;154;154;154;48;2;59;39;26m‚ñó[38;2;232;220;214;48;2;65;46;34m‚ñÖ[38;2;254;234;224;48;2;106;90;82m‚ñÖ[38;2;254;239;232;48;2;133;109;97m‚ñÜ[38;2;5;5;5;48;2;182;167;159m‚ñÅ[38;2;190;190;190;48;2;85;63;50m‚ñÉ[38;2;224;224;224;48;2;91;62;41m‚ñÉ[38;2;86;60;44;48;2;234;232;231m‚ñÄ[38;2;94;74;61;48;2;254;247;243m‚ñÄ[38;2;94;73;59;48;2;254;249;247m‚ñÄ[38;2;95;69;53;48;2;241;235;231m‚ñÄ[38;2;165;160;157;48;2;86;59;41m‚ñÇ[38;2;61;36;19;48;2;86;54;29m‚ñê[38;2;250;186;149;48;2;120;76;48m‚ñó[38;2;137;126;119;48;2;209;169;145m‚ñÅ[38;2;196;173;159;48;2;82;63;49m‚ññ[38;2;212;196;186;48;2;68;48;33m‚ñã[38;2;91;64;44;48;2;155;139;128m‚ñÄ[38;2;109;80;59;48;2;226;180;153m‚ñÉ[38;2;210;144;104;48;2;64;40;25m‚ññ[38;2;28;16;8;48;2;201;131;88m‚ñä[38;2;218;142;96;48;2;201;172;155m‚ñè[38;2;165;123;98;48;2;76;66;59m‚ñû[38;2;108;86;72;48;2;197;147;118m‚ñê[38;2;137;126;119;48;2;190;175;166m‚ñï[38;2;237;183;150;48;2;36;23;15m‚ñã[0m[7m[38;2;0;0;0m‚ñï[0m [0m
[38;2;19;17;16m‚ñï[38;2;169;111;77;48;2;29;18;11m‚ñÖ[38;2;200;135;95;48;2;129;98;79m‚ñä[38;2;206;206;206;48;2;29;17;10m‚ñÉ[38;2;234;234;234;48;2;125;83;56m‚ñÇ[38;2;228;159;118;48;2;42;25;15m‚ñÜ[38;2;122;75;45;48;2;25;16;8m‚ññ[38;2;154;143;129;48;2;33;33;33m‚ñÖ[38;2;86;57;27;48;2;128;117;111m‚ñÇ[38;2;233;151;102;48;2;97;62;41m‚ñÜ[38;2;183;137;108;48;2;177;162;153m‚ñî[38;2;192;136;102;48;2;197;193;191m‚ñî[38;2;180;112;70;48;2;197;160;139m‚ñò[38;2;96;60;35;48;2;201;162;139m‚ñó[38;2;85;65;42;48;2;195;191;189m‚ñÇ[38;2;92;65;31;48;2;220;218;217m‚ñÅ[38;2;128;108;82;48;2;237;236;235m‚ñÅ[38;2;254;254;254;48;2;253;244;239m‚ñÇ[38;2;254;243;236;48;2;254;251;250m‚ñÄ[38;2;254;245;241;48;2;254;252;251m‚ñî[38;2;254;251;250;48;2;254;232;219m‚ñÖ[38;2;254;234;223;48;2;254;248;245m‚ñÜ[38;2;254;238;228;48;2;254;249;247m‚ñé[38;2;254;253;253;48;2;249;239;233m‚ñÜ[38;2;20;20;19;48;2;196;195;193m‚ñê[38;2;240;175;137;48;2;114;99;89m‚ñä[38;2;168;142;124;48;2;97;69;46m‚ñÖ[38;2;71;58;48;48;2;195;148;124m‚ñè[38;2;184;145;125;48;2;227;170;141m‚ñî[38;2;210;167;146;48;2;89;77;69m‚ñè[38;2;0;0;0;48;2;141;123;111m‚ñÇ[38;2;241;180;144;48;2;0;0;0m‚ñä[0m[38;2;0;0;0m‚ñà[38;2;248;196;165;48;2;75;50;35m‚ñù[38;2;44;39;36;48;2;211;159;128m‚ñÄ[38;2;0;0;0;48;2;223;186;164m‚ñù[38;2;195;154;131;48;2;72;54;43m‚ñû[0m[7m[38;2;50;34;24m‚ñÅ[0m  [0m
[7m[38;2;24;22;21m‚ñè[0m[38;2;68;68;68;48;2;208;187;182m‚ñÜ[38;2;231;231;231;48;2;254;254;254m‚ñî[38;2;157;157;157;48;2;249;249;249m‚ñó[38;2;203;203;203;48;2;251;251;251m‚ñè[38;2;176;149;135;48;2;231;223;218m‚ñó[38;2;96;77;64;48;2;186;186;186m‚ñÜ[38;2;45;36;22;48;2;144;141;137m‚ññ[38;2;29;29;29;48;2;156;152;148m‚ñï[38;2;41;41;41;48;2;229;226;224m‚ñò[38;2;203;199;196;48;2;248;241;236m‚ñï[38;2;156;156;156;48;2;243;242;242m‚ññ[38;2;229;198;180;48;2;253;253;253m‚ñï[38;2;91;91;91;48;2;171;152;142m‚ñù[38;2;37;31;23;48;2;151;146;140m‚ñÖ[38;2;235;235;235;48;2;97;78;56m‚ñÉ[38;2;92;65;31;48;2;232;228;223m‚ñò[38;2;185;174;168;48;2;254;251;249m‚ñÅ[38;2;254;240;232;48;2;254;253;253m‚ñÄ[38;2;254;238;229;48;2;254;252;251m‚ñò[38;2;254;251;249;48;2;254;254;254m‚ñÅ[38;2;187;175;168;48;2;254;244;239m‚ñï[38;2;120;107;99;48;2;189;184;182m‚ñé[38;2;253;253;253;48;2;254;254;254m‚ññ[38;2;47;40;35;48;2;245;242;241m‚ñê[38;2;21;13;7;48;2;184;129;97m‚ññ[38;2;43;28;17;48;2;193;164;147m‚ñò[38;2;31;28;27;48;2;151;137;128m‚ñÉ[38;2;230;207;194;48;2;29;26;25m‚ñã[38;2;14;13;12;48;2;171;158;149m‚ñÉ[38;2;85;74;68;48;2;232;187;162m‚ñÄ[38;2;183;127;94;48;2;35;23;15m‚ñç[0m[7m[38;2;0;0;0m‚ñï[0m[38;2;0;0;0m‚ñî‚ñî‚ñî‚ñî[0m   [0m
[38;2;109;100;95;48;2;13;12;12m‚ñï[38;2;84;74;68;48;2;230;218;212m‚ñÅ[38;2;124;124;124;48;2;248;240;236m‚ñÅ[38;2;53;50;48;48;2;233;230;229m‚ñÉ[38;2;38;25;13;48;2;190;183;179m‚ñÇ[38;2;231;215;208;48;2;152;135;124m‚ñÜ[38;2;189;175;167;48;2;45;32;15m‚ñã[38;2;60;50;36;48;2;253;253;253m‚ñã[38;2;3;3;3;48;2;163;156;151m‚ñÅ[38;2;254;254;254;48;2;250;242;238m‚ñî[38;2;51;51;51;48;2;240;236;234m‚ñÇ[38;2;232;232;232;48;2;61;54;47m‚ñÄ[38;2;234;234;234;48;2;218;196;186m‚ñî[38;2;54;48;38;48;2;202;186;178m‚ñÅ[38;2;92;82;67;48;2;44;34;18m‚ñÅ[38;2;177;177;177;48;2;254;250;247m‚ñè[38;2;254;249;246;48;2;254;253;253m‚ñî[38;2;187;178;173;48;2;248;239;234m‚ñî[38;2;123;123;123;48;2;222;215;211m‚ñè[38;2;245;233;227;48;2;253;246;242m‚ñÅ[38;2;23;23;23;48;2;248;239;235m‚ñÇ[38;2;98;97;97;48;2;209;197;191m‚ñÖ[38;2;65;63;61;48;2;244;244;244m‚ñò[38;2;230;221;216;48;2;39;38;38m‚ñÄ[0m[7m[38;2;20;19;18m‚ñÅ[38;2;1;1;0m‚ñÅ[0m[38;2;183;130;99;48;2;0;0;0m‚ñÄ[38;2;24;16;11;48;2;178;137;113m‚ñÉ[38;2;0;0;0;48;2;207;170;148m‚ñÇ[38;2;28;18;12;48;2;181;139;113m‚ñÉ[0m[7m[38;2;76;53;39m‚ñÅ[0m[38;2;0;0;0m‚ñî[0m        [0m
[38;2;0;0;0m‚ñî[38;2;33;29;26m‚ñî[38;2;49;49;49m‚ñî[38;2;146;146;145;48;2;5;5;5m‚ñï[38;2;244;244;244;48;2;76;72;68m‚ññ[38;2;48;40;30;48;2;232;225;221m‚ñÄ[38;2;60;47;32;48;2;251;229;217m‚ñÄ[38;2;119;116;112;48;2;205;176;159m‚ñî[38;2;70;70;70;48;2;246;246;246m‚ñî[38;2;249;249;249;48;2;88;86;85m‚ñÜ[38;2;42;42;42;48;2;216;216;216m‚ñÅ[38;2;26;18;9;48;2;177;177;176m‚ñù[38;2;49;38;26;48;2;138;138;138m‚ñÄ[38;2;66;56;44;48;2;198;189;182m‚ñò[38;2;140;139;139;48;2;216;207;200m‚ñó[38;2;159;154;151;48;2;253;247;244m‚ññ[38;2;191;191;191;48;2;249;249;249m‚ñï[38;2;187;179;174;48;2;18;18;18m‚ñÄ[38;2;175;172;169;48;2;71;66;64m‚ñê[38;2;205;201;198;48;2;93;85;79m‚ñä[38;2;16;10;5;48;2;2;1;0m‚ñè[38;2;146;146;146;48;2;12;12;12m‚ñï[38;2;160;160;160;48;2;250;250;250m‚ñé[38;2;202;202;202;48;2;51;51;51m‚ñç[0m[38;2;0;0;0m‚ñè[0m               [0m
  [7m[38;2;0;0;0m‚ñè[0m[38;2;23;23;23;48;2;204;204;204m‚ñò[38;2;59;59;59;48;2;226;226;226m‚ñó[38;2;0;0;0;48;2;111;108;106m‚ñÜ[48;2;207;186;175m‚ñÜ[38;2;100;100;100;48;2;243;243;243m‚ñò[48;2;248;248;248m‚ñÇ[38;2;244;244;244;48;2;26;26;26m‚ñò[38;2;194;194;194;48;2;15;15;15m‚ñê[38;2;126;126;126;48;2;239;239;239m‚ñÅ[38;2;251;251;251;48;2;106;106;106m‚ñÉ[38;2;121;118;116;48;2;13;9;6m‚ññ[38;2;146;146;146;48;2;0;0;0m‚ñî[38;2;190;190;190;48;2;57;57;57m‚ñê[38;2;168;168;168;48;2;243;243;243m‚ñï[38;2;220;220;220;48;2;9;9;9m‚ñò[0m[38;2;0;0;0m‚ñî[7m[38;2;6;3;2m‚ñÅ[0m[38;2;0;0;0;48;2;0;0;0m‚ñÅ[38;2;203;203;203;48;2;51;48;46m‚ñù[38;2;33;25;21;48;2;240;240;240m‚ñÉ[38;2;118;118;117;48;2;7;7;7m‚ñè[0m[38;2;0;0;0m‚ñè[0m               [0m
   [38;2;172;172;172;48;2;25;25;25m‚ñî[38;2;47;47;47;48;2;227;227;227m‚ñÉ[38;2;29;29;29;48;2;215;214;213m‚ñî[38;2;163;163;163;48;2;6;6;6m‚ñó[38;2;214;214;214;48;2;254;254;254m‚ñè[38;2;155;155;155;48;2;9;9;9m‚ñé[0m [38;2;0;0;0m‚ñî[38;2;25;25;25m‚ñî[38;2;222;222;222;48;2;24;24;24m‚ñî[38;2;185;175;168;48;2;8;5;2m‚ñÄ[38;2;196;196;196;48;2;23;16;11m‚ñó[38;2;213;213;213;48;2;254;254;254m‚ñè[38;2;254;254;254;48;2;32;32;32m‚ñé[0m[7m[38;2;0;0;0m‚ñÅ[0m   [38;2;0;0;0m‚ñî‚ñî[0m                 [0m
    [38;2;8;8;8m‚ñî[7m[38;2;11;8;6m‚ñÅ[0m[38;2;189;174;165;48;2;14;8;4m‚ñù[38;2;254;254;254;48;2;92;80;72m‚ñî[0m[7m[38;2;1;1;1m‚ñÅ[0m    [7m[38;2;0;0;0m‚ñÅ[0m[38;2;50;37;27m‚ñÄ[38;2;199;187;180m‚ñî[38;2;19;17;15m‚ñî[0m                       [0m
[?25h"

# copied from neotech
get_os() {
    # $kernel_name is set in a function called cache_uname and is
    # just the output of "uname -s".
    case $kernel_name in
        Darwin)   os=$darwin_name ;;
        SunOS)    os=Solaris ;;
        Haiku)    os=Haiku ;;
        MINIX)    os=MINIX ;;
        AIX)      os=AIX ;;
        IRIX*)    os=IRIX ;;
        FreeMiNT) os=FreeMiNT ;;

        Linux|GNU*)
            os=Linux
        ;;

        *BSD|DragonFly|Bitrig)
            os=BSD
        ;;

        CYGWIN*|MSYS*|MINGW*)
            os=Windows
        ;;

        *)
            printf '%s\n' "Unknown OS detected: '$kernel_name', aborting..." >&2
            printf '%s\n' "Open an issue on GitHub to add support for your OS." >&2
            exit 1
        ;;
    esac
}

get_date() {
  date "+%B %-d, %Y"
}

get_user_host() {
  local user=$(whoami)
  # HOSTNAME is a bash variable, but not POSIX, so try hostname command as backup i guess
  local host=${HOSTNAME:-$(hostname)}
  echo "$user@$host"
}

get_memory() {
  mem_total=$(awk '/MemTotal/ {print $2}' /proc/meminfo)
  mem_free=$(awk '/MemFree/ {print $2}' /proc/meminfo)
  mem_used=$((mem_total - mem_free))
  mem_used_gb=$(((mem_used + 1048575) / 1048576)) # Round up to nearest GB
  mem_total_gb=$(((mem_total + 1048575) / 1048576)) # Round up to nearest GB
  # printf "%d / %d G" "$mem_used_gb" "$mem_total_gb"
  printf "%d G RAM" "$mem_total_gb"
}

get_disk_space_used() {
	df -h / | awk 'NR==2 {print $3}' | sed -E 's/([0-9]+)/\1 /'
}

get_disk_space_remaining() {
	df -h / | awk 'NR==2 {print $4}' | sed -E 's/([0-9]+)/\1 /'
}

get_packages() {
  # Determine the package manager and get the package count

  if command -v dpkg &> /dev/null; then
    # Debian-based (e.g., Ubuntu, Debian)
    num_packages=$(dpkg -l | grep '^ii' | wc -l)
  # pacman should come first before other package managers like rpm
  elif command -v pacman &> /dev/null; then
    # Arch-based (e.g., Arch Linux, Manjaro)
    num_packages=$(pacman -Qq | wc -l)
  elif command -v rpm &> /dev/null; then
    # Red Hat-based (e.g., Fedora, CentOS)
    num_packages=$(rpm -qa | wc -l)
  elif command -v apk &> /dev/null; then
    # Alpine Linux
    num_packages=$(apk info | wc -l)
  elif command -v brew &> /dev/null; then
    # Homebrew (macOS)
    num_packages=$(brew list | wc -l)
  else
    echo "Package manager not found"
    return 1 # Indicate an error
  fi

  # some people reported leading whitespace somehow, so strip that
  echo "${num_packages} packages" | sed 's/^\s*//'
}

get_cpu_cores() {
  if [ -f /proc/cpuinfo ]; then
    # Linux
    num_cores=$(grep -c '^processor' /proc/cpuinfo)
  elif command -v sysctl &> /dev/null; then
    # macOS/BSD
    num_cores=$(sysctl -n hw.ncpu)
  elif command -v wmic &> /dev/null; then
    # Windows (using WSL or Cygwin)
    num_cores=$(wmic cpu get NumberOfLogicalProcessors | tail -n 1)
  else
    echo "CPU core detection not supported"
    return 1 # Indicate an error
  fi

  echo "${num_cores} cores"
}

# copied and modified from neofetch
# only tested on linux
get_battery_level() {
  local battery="100%"
  case $os in
      "Linux")
          for bat in "/sys/class/power_supply/"{BAT,axp288_fuel_gauge,CMB,battery}*; do
              capacity="$(< "${bat}/capacity")"

              if [[ "$capacity" ]]; then
                  battery="${capacity}%";
		  break
      	      fi
          done
      ;;

      "BSD")
          case $kernel_name in
              "FreeBSD"* | "DragonFly"*)
                  battery="$(acpiconf -i 0 | awk -F ':\t' '/Remaining capacity/ {print $2}')"
              ;;

              "NetBSD"*)
                  battery="$(envstat | awk '\\(|\\)' '/charge:/ {print $2}')"
                  battery="${battery/\.*/%}"
              ;;

              "OpenBSD"* | "Bitrig"*)
                  battery0full="$(sysctl -n   hw.sensors.acpibat0.watthour0\
                                              hw.sensors.acpibat0.amphour0)"
                  battery0full="${battery0full%% *}"

                  battery0now="$(sysctl -n    hw.sensors.acpibat0.watthour3\
                                              hw.sensors.acpibat0.amphour3)"
                  battery0now="${battery0now%% *}"

                  [[ "$battery0full" ]] && \
                  battery="$((100 * ${battery0now/\.} / ${battery0full/\.}))%"
              ;;
          esac
      ;;

      "Mac OS X"|"macOS")
          battery="$(pmset -g batt | grep -o '[0-9]*%')"
      ;;

      "Windows")
          battery="$(wmic Path Win32_Battery get EstimatedChargeRemaining)"
          battery="${battery/EstimatedChargeRemaining}"
          battery="$(trim "$battery")%"
      ;;

      "Haiku")
          battery0full="$(awk -F '[^0-9]*' 'NR==2 {print $4}' /dev/power/acpi_battery/0)"
          battery0now="$(awk -F '[^0-9]*' 'NR==5 {print $4}' /dev/power/acpi_battery/0)"
          battery="$((battery0full * 100 / battery0now))%"
      ;;
  esac

  echo "$battery"
}

get_weather() {
  # todo: maybe use computer temp instead of literal weather
  # also i think if using VPN, the location for wttr.in will be wrong 
  
  # - strip leading plus sign
  # - lowercase first letter after comma
  curl -s wttr.in/?format='%f,+%C' | perl -pe 's/^\+?(.*), ([A-Z])/$1.", " . lc($2)/ge'
  #
  # curl -s wttr.in/?format='%f,+%C' | sed 's/^\+//' | sed 's/, [A-Z]/\L&/' 
  #   broken on mac; produces eg. 50¬∞FL, Light rain. 
  #   because \L is only on GNU sed and not mac sed
  #
  # other decent formats: '%f,+%C+%c'
}

get_first_line_width() {
  local ascii_art="$1"
  local first_line

  # Extract the first line
  first_line=$(echo "$ascii_art" | head -n 1)

  # Remove ANSI escape codes (if any)
  first_line=$(echo "$first_line" | sed -e 's/\x1b\[[0-9;]*m//g')

  # Get the width of the first line
  echo "${#first_line}"
}

get_line_width() {
  local line="$1"
  local stripped_line

  # Remove ANSI escape codes
  stripped_line=$(echo "$line" | sed -e 's/\x1b\[[0-9;]*m//g')

  # Get the length of the stripped line
  echo "${#stripped_line}"
}

get_terminal_width() {
  if [[ -n "$COLUMNS" ]]; then
    echo "$COLUMNS"
  else
    local width=$(tput cols 2>/dev/null)
    if [[ $? -eq 0 && -n "$width" ]]; then
      echo "$width"
    else
      local stty_size=$(stty size 2>/dev/null)
      if [[ $? -eq 0 && -n "$stty_size" ]]; then
        local stty_cols=$(echo "$stty_size" | awk '{print $2}')
        echo "$stty_cols"
      else
        echo 80 # Default if all fail
      fi
    fi
  fi
}

clip_line() {
  local line="$1"
  local max_width="$2"

  if [[ "${#line}" -gt "$max_width" ]]; then
    echo "${line:0:max_width}"
  else
    echo "$line"
  fi
}

draw_box() {
  local message="$1"
  local message_length="${#message}"

  local top_bottom_length=$((message_length + 2)) # Length of the top/bottom lines

  local top="‚ï≠"
  local bottom="‚ï∞"
  for ((i=0; i<top_bottom_length; i++)); do
    top+="‚îÄ"
    bottom+="‚îÄ"
  done
  top+="‚ïÆ"
  bottom+="‚ïØ"

  local side=$(printf "‚îÇ %s ‚îÇ\n" "$message")

  echo "$top"
  echo "$side"
  echo "$bottom"
}

main() {

  # while [[ "$1" ]]; do
  while [[ $# -gt 0 ]]; do
    case "$1" in
      --user-at-host) user_host="$2"; shift 2 ;;
      --date) today="$2"; shift 2 ;;
      --weather) weather="$2"; shift 2 ;;
      --battery) battery="$2"; shift 2 ;;
      --packages) packages="$2"; shift 2 ;;
      --ram) memory="$2"; shift 2 ;;
      --cores) cores="$2"; shift 2 ;;
      --disk-space-used) disk_space_used="$2"; shift 2 ;;
      --disk-space-remaining) disk_space_remaining="$2"; shift 2 ;;
      -h|--help) help ;;
      *) echo "Invalid option: $1"; help ;;
    esac
  done

  local user_host="${user_host:=$(get_user_host)}"
  local today="${today:=$(get_date)}"
  local weather="${weather:=$(get_weather)}"
  local battery="${battery:=$(get_battery_level)}"
  local packages="${packages:=$(get_packages)}"
  local memory="${memory:=$(get_memory)}"
  local cores="${cores:=$(get_cpu_cores)}"
  local disk_space_used="${disk_space_used:=$(get_disk_space_used)}"
  local disk_space_remaining="${disk_space_remaining:=$(get_disk_space_remaining)}"

  local disease
  local afflictions=("dysentery" "dysentery" "dysentery" "dysentery" "dysentery" "measles" "cholera" "typhoid")
  local random_index=$((RANDOM % 8))
  disease="${afflictions[$random_index]}"

  # Draw a box around the message
  local box_output=$(draw_box "$user_host has $disease.")

  # Split box_output into one variable per line
  # Without readarray, for people using bash pre-4.0:
  count=1
  while read line; do
    case "$count" in
      1) box_top="$line" ;;
      2) box_middle="$line" ;;
      3) box_bottom="$line" ;;
    esac
    count=$((count + 1))
  done <<EOF
$box_output
EOF

  # Split ASCII art into lines
  ascii_lines=$(echo "$ascii_art" | wc -l)
  ascii_array=$(echo "$ascii_art" |  awk '{ print $0 }')
  ascii_width=$(get_first_line_width "$ascii_art")

  # System info lines
  info_lines=(
    "$box_top"
    "$box_middle"
    "$box_bottom"
    ""
    "          Date:  $today"
    "       Weather:  $weather"
    "        Health:  $battery"
    "     Resources:  $packages"
    "                 $memory"
    "                 $cores"
    "Bytes traveled:  $disk_space_used"
    " Next landmark:  $disk_space_remaining"
  )
  # os, cpu

  max_lines=$((ascii_lines > ${#info_lines[@]} ? ascii_lines : ${#info_lines[@]}))

  terminal_width=$(get_terminal_width)
  available_width_after_art=$((terminal_width - ascii_width + 5)) # not sure why it is 5 off... 
                                                                  # padding? 
  
  echo ""
  for i in $(seq 0 $((max_lines - 1))); do
    ascii_line=$(echo "$ascii_array" | sed -n "$((i + 1))p")
    info_line="${info_lines[$i]}"
  
    # Pad ASCII art if shorter
    if [ -z "$ascii_line" ]; then
      ascii_line=$(printf "%*s" "$ascii_width" "") # Pad with spaces
    fi
  
    info_line_width="${#info_line}"
    clipped_info_line=$(clip_line "$info_line" "$available_width_after_art")
  
    printf "%s %s\n" "$ascii_line""$clipped_info_line"
  done  
}

main "$@"
